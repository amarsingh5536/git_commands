********Git log************
git log
desc: To check git log(commits details etc all list will come)

********Git status*********
git status
desc: To check git status like in how many files your changed 

********Git pull***********
git pull origin master

********Git diff***********
git diff file-name
desc: To check git what you changed in file 

********Git add************
git add file-name
desc: To add file for push the code 

********Git commit*********
git commit -m "someting is added" #run this command before push
desc: To add detail what changes you done!

********Git push***********
git push origin master
desc: To push the code in mentioned branch

********Git fetch**********
git fetch --all
desc: To fetch all branch name

********Git branch checkout*********
git checkout origin branch-name
desc: To checkout in paticular branch

********Git file checkout***********
git checkout file-name
desc: To checkout in paticular file in same branch / remove changes in paticular file in same branch

********Git Make New Branch*********
git checkout -b new-branch-name
desc: To make new branch 
# To push the all changes in new branch after this command\
run the git add command then you can push you code in new branch

********Pull request / Merge your branch into base *********
Pull request is all about asks/tell to maintainer/admin for review your branch code and merge into the base branch.
steps of creating pull request:
1). Make a new branch
2). Commit and push the changes in inherited branch.
3). Go to github in commit/branch you have pushed 
4). Click the Compare & pull request button
5). Select base branch there you want merge your branch.
6). Click Create pull request.
7). You can add there Reviewers and Assignees
Same you can Merge pull request by Click the Merge pull request button
*It is the way too merge your branch into base branch when you are self Reviewers/Assignees

********Git reset*********
git reset --hard branch-name #To reset branch
git reset --hard commit_id #To go on particular commit in same branch

desc: git reset command is used to reset the changes

********Git stash*********
git stash
git stash list
git stash apply {unique id}
git stash pop
git stash clean

desc: git stash command used to save changes on local

example 1: 
save the changes in particular(index) file
Run git stash save "changes in index file"
changes will save by name "changes in index file"
Run git stash list #To check all save satsh list
i.e: stash@{0}: On main: changes in index file
Run git stash apply stash@{0} when you need changes again in index file

example 2: 
Save changes to branch A.
Run git stash.
Check out branch B.
Fix the bug in branch B.
Commit and (optionally) push to remote.
Check out branch A
Run git stash pop / git stash apply stash@{0} #to get your stashed changes back.


********Git cherry-pick*********
git cherry-pick commit_id
desc: using Cherry picking command you can pick a commit from a branch and applying/inherit it to another
example: 
Save changes to branch A in file index.txt.
Run git commit -m "branch A index file changes"
Run git push origin A
Run git log
your last commit is 2ea77c01["branch A index file changes"] 

Check out branch B.
git cherry-pick 2ea77c01 # 2ea77c01 is commit_id
you can check your branch A commit [branch A index file changes] changes comes in branch B index.txt file
Commit and (optionally) push to remote.


********Git merge*********
git merge branch_name  #branch_name is the branch you want to merge with current branch
desc: Git merge is a command that allows you to merge two branches.
example:
1).Suppose originally there were 3 commits, A,B,C in branch main
2).your another developer who is working on branch develop have made two more changes with commit D, E so in branch develop now 5 commits A,B,C,D,E 
3).Now you want those develop branch all commits in main. you need to run merge command
4). git checkout main
5). git merge develop
6). Now develop branch's D,E commits code is reflecting in main branch with new commit suppose M(ie: Merge branch 'develop' into main). So now there is 4 commit A,B,C and M in commit history. It preserves complete history and chronological order.
If you get conflict while merging resolve conflicts git add (changes) git merge --continue


********Git Rebase*********
git rebase branch_name  #branch_name is the branch you want to merge with current branch
desc:Git rebase is a command that allows developers to integrate changes from one branch to another.
Git Merge and Git Rebase are both used to combine the changes of branches but in a distinct way.
example:
1).Suppose originally there were 3 commits, A,B,C in branch main and same in develop branch.
2).your another developer who is working on branch main have made two more changes with commit D, E so in branch main now 5 commits A,B,C,D,E 
3).Now you want rebase those main branch all commits in develop. you need to run merge command
4). git checkout develop
5). git rebase main
6). Now main branch's D, E code is reflecting in develop branch as well as in commit history. So now there is 5 commit A,B,C,D,E in straight line  same as main branch in develop commit history.
If you get conflict while rebasing resolve conflicts git add (changes) git rebase --continue


********Git delete branch*********
git branch -d branch-name #1st run this command
git push origin --delete branch-name #when 1st is done then run this command
desc: To delete created branch

******** Git revert*********
git revert <commit-ID>
git push --force origin main
desc: git revert command is used for undoing changes to a repository's commit.


******** Git Delete the most recent commit*********
git reset --soft HEAD~1 #Delete the most recent commit on local, keeping the work

git reset --hard HEAD~1 #Delete the most recent commit on remote
git push origin master --force #force push after delete remote commit 
*If you want again back your commit use cherry-pick command:
git cherry-pick commit_id


********Git add or remove username/email***********
By command: 
git config --global user.name "amarsingh5536"
git config --global user.email "amarsingh5536@gmail.com"

By changing in config file: 
nano ~/.gitconfig # add email and userer in opened file like as mantioned below:
[user]
        name = amarsingh5536
        email = amarsingh5536@gmail.com
        useconfigonly = true
[credential]
        username = amarsingh5536












